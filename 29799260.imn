node n1 {
    type router
    model router
    network-config {
	hostname RA
	!
	interface eth0
	 ip address 176.16.2.129/26
	!
	interface eth2
	 ip address 10.0.2.1/24
	!
	interface eth1
	 ip address 10.0.1.1/24
	!
    }
    canvas c1
    iconcoords {449.0 326.0}
    labelcoords {449.0 358.0}
    interface-peer {eth0 n4}
    interface-peer {eth1 n3}
    interface-peer {eth2 n2}
    services {zebra RIP vtysh IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.129
	#/sbin/ip route add 10.9.8.0/24 via 10.0.1.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.2.1
	ip route add 176.16.0.0/23 via 10.0.2.2
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.0.1/24
	!
	interface eth1
	  ip address 10.0.1.1/24
	!
	interface eth2
	  ip address 10.0.2.1/24
	!
	router rip
	  redistribute static
	  redistribute connected
	  redistribute ospf
	  network 176.16.2.128/26
	  network 10.0.1.0/24
	  network 10.0.2.0/24
	!
	
	}
    }
}

node n3 {
    type router
    model router
    network-config {
	hostname RB
	!
	interface eth1
	 ip address 176.16.2.1/25
	!
	interface eth2
	 ip address 10.0.3.1/24
	!
	interface eth0
	 ip address 10.0.1.2/24
	!
    }
    canvas c1
    iconcoords {309.0 522.0}
    labelcoords {309.0 554.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n6}
    interface-peer {eth2 n2}
    services {zebra RIP vtysh IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.1.1
	#/sbin/ip route add 10.9.8.0/24 via 176.16.2.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.3.1
	ip route add 176.16.0.0/23 via 10.0.3.2
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.1.2/24
	!
	interface eth1
	  ip address 10.0.4.1/24
	!
	interface eth2
	  ip address 10.0.3.1/24
	!
	router rip
	  redistribute static
	  redistribute connected
	  redistribute ospf
	  network 176.16.2.0/25
	  network 10.0.1.0/24
	  network 10.0.3.0/24
	!
	
	}
    }
}

node n4 {
    type lanswitch
    network-config {
	hostname SA
	!
	interface e2
	!
	interface e1
	!
	interface e0
	!
    }
    canvas c1
    iconcoords {449.0 204.0}
    labelcoords {449.0 228.0}
    interface-peer {e0 n1}
    interface-peer {e1 n7}
    interface-peer {e2 n8}
}

node n5 {
    type lanswitch
    network-config {
	hostname SC
	!
	interface e0
	!
	interface e2
	!
	interface e1
	!
    }
    canvas c1
    iconcoords {725.0 518.0}
    labelcoords {725.0 542.0}
    interface-peer {e1 n11}
    interface-peer {e2 n12}
    interface-peer {e0 n2}
}

node n6 {
    type lanswitch
    network-config {
	hostname SB
	!
	interface e2
	!
	interface e1
	!
	interface e0
	!
    }
    canvas c1
    iconcoords {160.0 492.0}
    labelcoords {160.0 516.0}
    interface-peer {e0 n3}
    interface-peer {e1 n9}
    interface-peer {e2 n10}
}

node n7 {
    type router
    model PC
    network-config {
	hostname n7
	!
	interface eth0
	 ip address 176.16.2.131/26
	!
    }
    canvas c1
    iconcoords {374.0 71.0}
    labelcoords {374.0 103.0}
    interface-peer {eth0 n4}
}

node n8 {
    type router
    model PC
    network-config {
	hostname n8
	!
	interface eth0
	 ip address 176.16.2.130/26
	!
    }
    canvas c1
    iconcoords {576.0 76.0}
    labelcoords {576.0 108.0}
    interface-peer {eth0 n4}
}

node n9 {
    type router
    model PC
    network-config {
	hostname n9
	!
	interface eth0
	 ip address 176.16.2.2/25
	!
    }
    canvas c1
    iconcoords {61.0 421.0}
    labelcoords {61.0 453.0}
    interface-peer {eth0 n6}
}

node n10 {
    type router
    model PC
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 176.16.2.3/25
	!
    }
    canvas c1
    iconcoords {50.0 551.0}
    labelcoords {50.0 583.0}
    interface-peer {eth0 n6}
}

node n11 {
    type router
    model PC
    network-config {
	hostname n11
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {861.0 416.0}
    labelcoords {861.0 448.0}
    interface-peer {eth0 n5}
    services {DefaultRoute DHCPClient}
}

node n12 {
    type router
    model PC
    network-config {
	hostname n12
	!
	interface eth0
	!
    }
    canvas c1
    iconcoords {857.0 585.0}
    labelcoords {857.0 617.0}
    interface-peer {eth0 n5}
    services {DefaultRoute DHCPClient}
}

node n2 {
    type router
    model router
    network-config {
	hostname RC
	!
	interface eth2
	 ip address 176.16.0.1/23
	!
	interface eth1
	 ip address 10.0.3.2/24
	!
	interface eth0
	 ip address 10.0.2.2/24
	!
    }
    canvas c1
    iconcoords {562.0 521.0}
    labelcoords {562.0 553.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n3}
    interface-peer {eth2 n5}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.2.1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.3.1
	#/sbin/ip route add 10.9.8.0/24 via 176.16.0.1
	ip route add 176.16.2.128/26 via 10.0.2.1
	ip route add 176.16.2.0/25 via 10.0.3.1
	}
    }
    custom-config {
	custom-config-id service:DHCP
	custom-command DHCP
	config {
	files=('/etc/dhcp/dhcpd.conf', )
	}
    }
    custom-config {
	custom-config-id service:DHCP:/etc/dhcp/dhcpd.conf
	custom-command /etc/dhcp/dhcpd.conf
	config {
	# auto-generated by DHCP service (utility.py)
	# NOTE: move these option lines into the desired pool { } block(s) below
	#option domain-name "test.com";
	#option domain-name-servers 10.0.0.1;
	#option routers 10.0.0.1;
	
	log-facility local6;
	
	default-lease-time 600;
	max-lease-time 7200;
	
	ddns-update-style none;
	
	subnet 10.0.2.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.2.127 10.0.2.254;
	    default-lease-time 600;
	    option routers 10.0.2.2;
	  }
	}
	
	
	subnet 10.0.3.0 netmask 255.255.255.0 {
	  pool {
	    range 10.0.3.127 10.0.3.254;
	    default-lease-time 600;
	    option routers 10.0.3.2;
	  }
	}
	
	
	subnet 176.16.0.0 netmask 255.255.254.0 {
	  pool {
	    range 176.16.0.1 176.16.1.254;
	    default-lease-time 600;
	    option routers 176.16.0.1;
	  }
	}
	
	
	}
    }
    services {IPForward StaticRoute DHCP}
}

link l1 {
    nodes {n4 n1}
    bandwidth 0
}

link l2 {
    nodes {n1 n3}
    bandwidth 0
}

link l5 {
    nodes {n3 n6}
    bandwidth 0
}

link l6 {
    nodes {n4 n7}
    bandwidth 0
}

link l7 {
    nodes {n4 n8}
    bandwidth 0
}

link l8 {
    nodes {n5 n11}
    bandwidth 0
}

link l9 {
    nodes {n5 n12}
    bandwidth 0
}

link l10 {
    nodes {n6 n9}
    bandwidth 0
}

link l11 {
    nodes {n6 n10}
    bandwidth 0
}

link l3 {
    nodes {n1 n2}
    bandwidth 0
}

link l4 {
    nodes {n3 n2}
    bandwidth 0
}

link l12 {
    nodes {n2 n5}
    bandwidth 0
}

annotation a1 {
    iconcoords {31.0 364.0 277.0 617.0}
    type rectangle
    label {NET B}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    color #28c030
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {317.0 37.0 612.0 305.0}
    type rectangle
    label {NET A}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    color #c084ff
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {592.0 345.0 912.0 634.0}
    type rectangle
    label {NET C}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    color #41c0ff
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

